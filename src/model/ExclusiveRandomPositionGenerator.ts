import { ExclusiveRng } from "./ExclusiveRandomNumberGenerator";
import { Position } from "./Position";

class ExclusiveRandomPositionGenerator {
  private sideAbsLimit: number;
  private rng: ExclusiveRng;

  /**
   * @brief Creates a new ExclusiveRandomPosition generator that generates
   *        random exclusive positions in the given range.
   * @param sideAbsLimit Limit for the invidual coordinates of position to be
   *        generated.
   */
  constructor(sideAbsLimit: number) {
    this.sideAbsLimit = sideAbsLimit;
    const minPosition = new Position(
      -sideAbsLimit,
      -sideAbsLimit,
      -sideAbsLimit
    );
    const maxPosition = new Position(sideAbsLimit, sideAbsLimit, sideAbsLimit);
    this.rng = new ExclusiveRng(
      this.positionToNumber(minPosition),
      this.positionToNumber(maxPosition),
      []
    );
  }

  public updateOccupated(oldPos: Position, newPos: Position): void {
    this.rng.updateExcluded(
      this.positionToNumber(oldPos),
      this.positionToNumber(newPos)
    );
  }

  public addOcuppated(newPos: Position): void {
    this.rng.addExcluded(this.positionToNumber(newPos));
  }

  public generate(): Position {
    return this.numberToPosition(this.rng.generateRandomNumber());
  }

  /**
   * @brief Produces an integer uniquely identifying the given position.
   * @param pos The position to convert. It must be in the range defined by the
   *        given sideAbsLimit.
   * @returns An integer that uniquely identifies the position. Must be between
   *          the number generated by the corner in the I octant and the number
   *          generated by the corner in the VII octant, inclusive.
   */
  private positionToNumber(pos: Position): number {
    const c = this.sideAbsLimit;
    const actualSide = 2 * c + 1;
    const x = pos.getX() + c;
    const y = pos.getY() + c;
    const z = pos.getZ() + c;
    return z * actualSide ** 2 + y * actualSide + x;
  }

  private numberToPosition(num: number): Position {
    const c = this.sideAbsLimit;
    const actualSide = 2 * c + 1;
    const x = (num % actualSide) - c;
    const y = Math.floor((num % actualSide ** 2) / actualSide) - c;
    const z = Math.floor(num / actualSide ** 2) - c;
    return new Position(x, y, z);
  }
}

export { ExclusiveRandomPositionGenerator };
